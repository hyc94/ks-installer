
---
# Source: jenkins/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ks-jenkins
  labels:
    app: ks-jenkins
    chart: "jenkins-0.19.0"
    release: "ks-jenkins"
    heritage: "Tiller"
type: Opaque
data:
  
  jenkins-admin-password: "RG1zb3k2REpVYw=="
  
  jenkins-admin-user: "YWRtaW4="
---
# Source: jenkins/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ks-jenkins
data:
  config.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <hudson>
      <disabledAdministrativeMonitors/>
      <version>2.176.2</version>
      <numExecutors>0</numExecutors>
      <mode>NORMAL</mode>
      <useSecurity>true</useSecurity>
      <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
        <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
      </authorizationStrategy>
      <securityRealm class="hudson.security.LegacySecurityRealm"/>
      <disableRememberMe>false</disableRememberMe>
      <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
      <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULLNAME}</workspaceDir>
      <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
      <markupFormatter class="hudson.markup.EscapedMarkupFormatter"/>
      <jdks/>
      <viewsTabBar class="hudson.views.DefaultViewsTabBar"/>
      <myViewsTabBar class="hudson.views.DefaultMyViewsTabBar"/>
      <clouds>
        <org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud plugin="kubernetes@1.19.2">
          <name>kubernetes</name>
          <templates>
            <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
              <inheritFrom></inheritFrom>
              <name>default</name>
              <instanceCap>2147483647</instanceCap>
              <idleMinutes>0</idleMinutes>
              <label>ks-jenkins-jenkins-slave </label>
              <nodeSelector></nodeSelector>
                <nodeUsageMode>NORMAL</nodeUsageMode>
              <volumes>
              </volumes>
              <containers>
                <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
                  <name>jnlp</name>
                  <image>jenkins/jnlp-slave:3.27-1</image>
                  <privileged>false</privileged>
                  <alwaysPullImage>false</alwaysPullImage>
                  <workingDir>/home/jenkins</workingDir>
                  <command></command>
                  <args>${computer.jnlpmac} ${computer.name}</args>
                  <ttyEnabled>false</ttyEnabled>
                  # Resources configuration is a little hacky. This was to prevent breaking
                  # changes, and should be cleanned up in the future once everybody had
                  # enough time to migrate.
                  <resourceRequestCpu>200m</resourceRequestCpu>
                  <resourceRequestMemory>256Mi</resourceRequestMemory>
                  <resourceLimitCpu>200m</resourceLimitCpu>
                  <resourceLimitMemory>256Mi</resourceLimitMemory>
                  <envVars>
                    <org.csanchez.jenkins.plugins.kubernetes.ContainerEnvVar>
                      <key>JENKINS_URL</key>
                      <value>http://ks-jenkins:80</value>
                    </org.csanchez.jenkins.plugins.kubernetes.ContainerEnvVar>
                  </envVars>
                </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
              </containers>
              <envVars/>
              <annotations/>
              <imagePullSecrets/>
              <nodeProperties/>
              <podRetention class="org.csanchez.jenkins.plugins.kubernetes.pod.retention.Default"/>
            </org.csanchez.jenkins.plugins.kubernetes.PodTemplate></templates>
          <serverUrl>https://kubernetes.default</serverUrl>
          <skipTlsVerify>false</skipTlsVerify>
          <namespace>kubesphere-devops-system</namespace>
          <jenkinsUrl>http://ks-jenkins:80</jenkinsUrl>
          <jenkinsTunnel>ks-jenkins-agent:50000</jenkinsTunnel>
          <containerCap>10</containerCap>
          <retentionTimeout>5</retentionTimeout>
          <connectTimeout>0</connectTimeout>
          <readTimeout>0</readTimeout>
          <podRetention class="org.csanchez.jenkins.plugins.kubernetes.pod.retention.Never"/>
        </org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud>
      </clouds>
      <quietPeriod>5</quietPeriod>
      <scmCheckoutRetryCount>0</scmCheckoutRetryCount>
      <views>
        <hudson.model.AllView>
          <owner class="hudson" reference="../../.."/>
          <name>All</name>
          <filterExecutors>false</filterExecutors>
          <filterQueue>false</filterQueue>
          <properties class="hudson.model.View$PropertyList"/>
        </hudson.model.AllView>
      </views>
      <primaryView>All</primaryView>
      <slaveAgentPort>50000</slaveAgentPort>
      <disabledAgentProtocols>
        <string>JNLP-connect</string>
        <string>JNLP2-connect</string>
      </disabledAgentProtocols>
      <label></label>
      <crumbIssuer class="hudson.security.csrf.DefaultCrumbIssuer">
        <excludeClientIPFromCrumb>true</excludeClientIPFromCrumb>
      </crumbIssuer>
      <nodeProperties/>
      <globalNodeProperties/>
      <noUsageStatistics>true</noUsageStatistics>
    </hudson>
  jenkins.model.JenkinsLocationConfiguration.xml: |-
    <?xml version='1.1' encoding='UTF-8'?>
    <jenkins.model.JenkinsLocationConfiguration>
      <adminAddress></adminAddress>
      <jenkinsUrl>http://ks-jenkins:80</jenkinsUrl>
    </jenkins.model.JenkinsLocationConfiguration>
  jenkins.CLI.xml: |-
    <?xml version='1.1' encoding='UTF-8'?>
    <jenkins.CLI>
      <enabled>false</enabled>
    </jenkins.CLI>
  apply_config.sh: |-
    mkdir -p /usr/share/jenkins/ref/secrets/;
    echo "false" > /usr/share/jenkins/ref/secrets/slave-to-master-security-kill-switch;
    cp --no-clobber /var/jenkins_config/config.xml /var/jenkins_home;
    cp --no-clobber /var/jenkins_config/jenkins.CLI.xml /var/jenkins_home;
    cp --no-clobber /var/jenkins_config/jenkins.model.JenkinsLocationConfiguration.xml /var/jenkins_home;
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    if [ $? != 0 ]; then
      echo "exit beacause install plugin failed"
      exit 1
    fi
    # Copy plugins to shared volume
    cp -n /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins;
    mkdir -p /var/jenkins_home/init.groovy.d/;
    yes | cp -i /var/jenkins_config/*.groovy /var/jenkins_home/init.groovy.d/
  initK8sCredentials.groovy: |-
    import com.cloudbees.plugins.credentials.CredentialsScope
    import com.cloudbees.plugins.credentials.SystemCredentialsProvider
    import com.cloudbees.plugins.credentials.domains.Domain
    import org.csanchez.jenkins.plugins.kubernetes.ServiceAccountCredential
    
    def addKubeCredential(String credentialId) {
      def kubeCredential = new ServiceAccountCredential(CredentialsScope.GLOBAL, credentialId, 'Kubernetes service account')
      SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), kubeCredential)
    }
    
    addKubeCredential('k8s-service-account')
  initMailer.groovy: |-
    import jenkins.model.*
    
    def env = System.getenv()
    
    def emailFromName = env.EMAIL_FROM_NAME
    def emailFromAddr = env.EMAIL_FROM_ADDR
    
    def locationConfig = JenkinsLocationConfiguration.get()
    locationConfig.adminAddress = "${emailFromName} <${emailFromAddr}>"
    locationConfig.save()
    
    def mailer = Jenkins.instance.getDescriptor("hudson.tasks.Mailer")
    mailer.setSmtpAuth(emailFromAddr, env.EMAIL_FROM_PASS)
    mailer.setReplyToAddress("no-reply@k8s.kubesphere.io")
    mailer.setSmtpHost(env.EMAIL_SMTP_HOST)
    mailer.setUseSsl(env.EMAIL_USE_SSL.toBoolean())
    mailer.setSmtpPort(env.EMAIL_SMTP_PORT)
    mailer.save()
  initRBAC.groovy: |-
    import hudson.*
    import hudson.model.*
    import hudson.security.*
    import jenkins.*
    import jenkins.model.*
    import java.util.*
    import com.michelin.cio.hudson.plugins.rolestrategy.*
    import java.lang.reflect.*
    import com.synopsys.arc.jenkins.plugins.rolestrategy.*
    
    def env = System.getenv()
    
    // Roles
    def globalRoleRead = "kubesphere-user"
    def globalRoleAdmin = "admin"
    def ldapUserNameAdmin = "admin"
    
    def jenkinsInstance = Jenkins.getInstance()
    def currentAuthenticationStrategy = Hudson.instance.getAuthorizationStrategy()
    if (currentAuthenticationStrategy instanceof RoleBasedAuthorizationStrategy) {
      println "Role based authorisation already enabled."
      println "Exiting script..."
      return
    } else {
        println "Enabling role based authorisation strategy..."
    }
    
    // Set new authentication strategy
    RoleBasedAuthorizationStrategy roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()
    jenkinsInstance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)
    
    Constructor[] constrs = Role.class.getConstructors();
    for (Constructor<?> c : constrs) {
        c.setAccessible(true);
    }
    
    // Make the method assignRole accessible
    Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod("assignRole", RoleType.class, Role.class, String.class);
    assignRoleMethod.setAccessible(true);
    
    // Create admin set of permissions
    Set<Permission> adminPermissions = new HashSet<Permission>();
    adminPermissions.add(Permission.fromId("hudson.model.View.Delete"));
    adminPermissions.add(Permission.fromId("hudson.model.Computer.Connect"));
    adminPermissions.add(Permission.fromId("hudson.model.Run.Delete"));
    adminPermissions.add(Permission.fromId("hudson.model.Hudson.UploadPlugins"));
    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains"));
    adminPermissions.add(Permission.fromId("hudson.model.Computer.Create"));
    adminPermissions.add(Permission.fromId("hudson.model.View.Configure"));
    adminPermissions.add(Permission.fromId("hudson.model.Hudson.ConfigureUpdateCenter"));
    adminPermissions.add(Permission.fromId("hudson.model.Computer.Build"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Configure"));
    adminPermissions.add(Permission.fromId("hudson.model.Hudson.Administer"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Cancel"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Read"));
    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.View"));
    adminPermissions.add(Permission.fromId("hudson.model.Computer.Delete"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Build"));
    adminPermissions.add(Permission.fromId("hudson.scm.SCM.Tag"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Discover"));
    adminPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));
    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Update"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Create"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Move"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Workspace"));
    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Delete"));
    adminPermissions.add(Permission.fromId("hudson.model.View.Read"));
    adminPermissions.add(Permission.fromId("hudson.model.Hudson.RunScripts"));
    adminPermissions.add(Permission.fromId("hudson.model.View.Create"));
    adminPermissions.add(Permission.fromId("hudson.model.Item.Delete"));
    adminPermissions.add(Permission.fromId("hudson.model.Computer.Configure"));
    adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Create"));
    adminPermissions.add(Permission.fromId("hudson.model.Computer.Disconnect"));
    adminPermissions.add(Permission.fromId("hudson.model.Run.Update"));
    adminPermissions.add(Permission.fromId("hudson.model.Run.Replay"));
    
    // Create the admin Role
    Role adminRole = new Role(globalRoleAdmin, adminPermissions);
    roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);
    
    // Assign the role
    roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, ldapUserNameAdmin);
    println "Admin role created...OK"
    
    /// Read access for authenticated users
    // Create permissions
    Set<Permission> authenticatedPermissions = new HashSet<Permission>();
    authenticatedPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));
    
    Role authenticatedRole = new Role(globalRoleRead, authenticatedPermissions);
    roleBasedAuthenticationStrategy.addRole(RoleType.Global, authenticatedRole);
    
    // Assign the role
    roleBasedAuthenticationStrategy.assignRole(RoleType.Global, authenticatedRole, 'authenticated');
    println "Read role created...OK"
    
    // Save the state
    println "Saving changes."
    jenkinsInstance.save()
  initSonarqube.groovy: |-
    import hudson.model.*
    import jenkins.model.*
    import hudson.plugins.sonar.*
    import hudson.plugins.sonar.model.TriggersConfig
    import hudson.tools.*
    
    
    def env = System.getenv()
    def instance = Jenkins.getInstance()
    // Check sonarqube enable
    if (env['SONAR_ENABLED'] == null || !env['SONAR_ENABLED'].toBoolean()) {
        println "--> SonarQube Disabled"
        return
    }
    
    def sonar_server_url = env['SONAR_SERVER_URL']
    def sonar_auth_token = env['SONAR_AUTH_TOKEN']
    def sonar_plugin_version = env['SONAR_PLUGIN_VERSION']
    def sonar_additional_props = env['SONAR_ADDITIONAL_PROPS']
    
    
    def SonarGlobalConfiguration sonar_conf = instance.getDescriptor(SonarGlobalConfiguration.class)
    
    def sonar_inst = new SonarInstallation(
            "sonar", // Name
            sonar_server_url,
            sonar_auth_token,
            sonar_plugin_version,
            sonar_additional_props,
            new TriggersConfig(),
            "" // Additional Analysis Properties
    )
    
    def sonar_installations = sonar_conf.getInstallations()
    def sonar_inst_exists = false
    def sonar_exists_index = 0
    sonar_installations.eachWithIndex {
        it, index ->
        installation = (SonarInstallation) it
        if (sonar_inst.getName() == installation.getName()) {
          sonar_inst_exists = true
          sonar_exists_index = index
          println("Found existing installation: " + installation.getName() + " : " +index)
        }
    }
    
    if (sonar_inst_exists) {
        sonar_installations[sonar_exists_index] = sonar_inst
        sonar_conf.setInstallations((SonarInstallation[]) sonar_installations)
        sonar_conf.save()
    }else{
        sonar_installations += sonar_inst
        sonar_conf.setInstallations((SonarInstallation[]) sonar_installations)
        sonar_conf.save()
    }
    
    
    def sonar_runner_version = env['SONAR_RUNNER_VERSION']
    
    println "--> Configuring SonarRunner"
    def desc_SonarRunnerInst = instance.getDescriptor("hudson.plugins.sonar.SonarRunnerInstallation")
    
    def sonarRunnerInstaller = new ZipExtractionInstaller('',"http://uc-jenkins-update-center/sonar-scanner-cli/sonar-scanner-cli-"+sonar_runner_version+".zip","sonar-scanner-"+sonar_runner_version)
    def installSourceProperty = new InstallSourceProperty([sonarRunnerInstaller])
    def sonarRunner_inst = new SonarRunnerInstallation("sonar", "", [installSourceProperty])
    
    def sonar_runner_installations = desc_SonarRunnerInst.getInstallations()
    def sonar_runner_inst_exists = false
    def sonar_runner_exists_index = 0
    sonar_runner_installations.eachWithIndex {
        it, index ->
        installation = (SonarRunnerInstallation) it
        if (sonarRunner_inst.getName() == installation.getName()) {
            sonar_runner_inst_exists = true
            sonar_runner_exists_index = index
            println("Found existing installation: " + installation.getName())
        }
    }
    
    if (sonar_runner_inst_exists) {
        sonar_runner_installations[sonar_runner_exists_index] = sonarRunner_inst
        desc_SonarRunnerInst.setInstallations((SonarRunnerInstallation[]) sonar_runner_installations)
        desc_SonarRunnerInst.save()
    } else{
        sonar_runner_installations += sonarRunner_inst
        desc_SonarRunnerInst.setInstallations((SonarRunnerInstallation[]) sonar_runner_installations)
        desc_SonarRunnerInst.save()
    }
    
    // Save the state
    instance.save()
  plugins.txt: |-
    ace-editor:1.1
    apache-httpcomponents-client-4-api:4.5.5-3.0
    async-http-client:1.9.40.0
    authentication-tokens:1.3
    azure-commons:1.0.4
    blueocean:1.19.0
    blueocean-autofavorite:1.2.3
    blueocean-bitbucket-pipeline:1.19.0
    blueocean-commons:1.19.0
    blueocean-config:1.19.0
    blueocean-core-js:1.19.0
    blueocean-dashboard:1.19.0
    blueocean-display-url:2.2.0
    blueocean-events:1.19.0
    blueocean-executor-info:1.19.0
    blueocean-git-pipeline:1.19.0
    blueocean-github-pipeline:1.19.0
    blueocean-i18n:1.19.0
    blueocean-jira:1.19.0
    blueocean-jwt:1.19.0
    blueocean-personalization:1.19.0
    blueocean-pipeline-api-impl:1.19.0
    blueocean-pipeline-editor:1.19.0
    blueocean-pipeline-scm-api:1.19.0
    blueocean-rest-impl:1.19.0
    blueocean-rest:1.19.0
    blueocean-web:1.19.0
    bouncycastle-api:2.17
    branch-api:2.2.0
    build-monitor-plugin:1.12+build.201809061734
    build-timeout:1.19
    cloudbees-bitbucket-branch-source:2.4.5
    cloudbees-folder:6.9
    command-launcher:1.3
    conditional-buildstep:1.3.6
    configuration-as-code:1.35
    configuration-as-code-support:1.18
    config-file-provider:3.6
    credentials-binding:1.18
    credentials:2.3.0
    display-url-api:2.3.2
    docker-commons:1.15
    docker-workflow:1.17
    durable-task:1.30
    favorite:2.3.2
    generic-webhook-trigger:1.45
    git-client:2.7.6
    git-server:1.7
    git:3.9.3
    github-api:1.106
    github-branch-source:2.6.0
    github:1.29.4
    handlebars:1.1.1
    handy-uri-templates-2-api:2.1.7-1.0
    htmlpublisher:1.18
    jackson2-api:2.10.2
    javadoc:1.5
    jaxb:2.3.0.1
    jdk-tool:1.2
    jenkins-design-language:1.19.0
    jira:3.0.8
    job-dsl:1.75
    jquery:1.11.2-0
    jquery-detached:1.2.1
    jquery-ui:1.0.1
    jsch:0.1.55
    junit:1.27
    kubernetes-cd:2.3.0
    kubernetes-client-api:1.0.0
    kubernetes-credentials:0.4.0
    kubernetes:1.19.2
    kubesphere-extension:0.0.1
    kubesphere-token-auth:0.2.0
    ldap:1.20
    lockable-resources:2.5
    mailer:1.24
    managed-scripts:1.4
    mapdb-api:1.0.9.0
    maven-plugin:3.4
    matrix-auth:2.4.2
    matrix-project:1.14
    mercurial:2.4
    metrics:4.0.2.5
    momentjs:1.1.1
    multibranch-action-triggers:1.4
    node-iterator-api:1.5
    parameterized-trigger:2.35.2
    pipeline-build-step:2.8
    pipeline-graph-analysis:1.10
    pipeline-input-step:2.10
    pipeline-milestone-step:1.3.1
    pipeline-model-api:1.3.9
    pipeline-model-declarative-agent:1.1.1
    pipeline-model-definition:1.3.9
    pipeline-model-extensions:1.3.9
    pipeline-rest-api:2.10
    pipeline-stage-step:2.3
    pipeline-stage-tags-metadata:1.3.9
    pipeline-stage-view:2.10
    plain-credentials:1.5
    pubsub-light:1.13
    run-condition:1.2
    resource-disposer:0.12
    role-strategy:2.13
    ruby-runtime:0.12
    scm-api:2.6.3
    script-security:1.62
    sonar:2.8.1
    sse-gateway:1.20
    ssh-credentials:1.17.1
    ssh-slaves:1.29.4
    structs:1.20
    subversion:2.12.1
    support-core:2.56
    token-macro:2.8
    variant:1.3
    workflow-aggregator:2.6
    workflow-api:2.37
    workflow-basic-steps:2.18
    workflow-cps-global-lib:2.15
    workflow-cps:2.73
    workflow-durable-task-step:2.31
    workflow-job:2.32
    workflow-multibranch:2.21
    workflow-scm-step:2.9
    workflow-step-api:2.20
    workflow-support:3.3
    ws-cleanup:0.37
---
# Source: jenkins/templates/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ks-jenkins-tests
data:
  run.sh: |-
    @test "Testing Jenkins UI is accessible" {
      curl --retry 48 --retry-delay 10 ks-jenkins:80/login
    }
---
# Source: jenkins/templates/home-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ks-jenkins
  labels:
    app: ks-jenkins
    chart: "jenkins-0.19.0"
    release: "ks-jenkins"
    heritage: "Tiller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
  # 本地调试注释
  # storageClassName: "local"
---
# Source: jenkins/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ks-jenkins
  labels:
    app: ks-jenkins
    chart: "jenkins-0.19.0"
    release: "ks-jenkins"
    heritage: "Tiller"
---
# Source: jenkins/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ks-jenkins-role-binding
  labels:
    app: ks-jenkins
    chart: "jenkins-0.19.0"
    release: "ks-jenkins"
    heritage: "Tiller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ks-jenkins
  namespace: kubesphere-devops-system
---
# Source: jenkins/templates/jenkins-agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ks-jenkins-agent
  labels:
    app: ks-jenkins
    chart: "jenkins-0.19.0"
    component: "ks-jenkins-jenkins-master"
spec:
  ports:
    - port: 50000
      targetPort: 50000
      
      name: slavelistener
  selector:
    component: "ks-jenkins-jenkins-master"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ks-jenkins
  labels:
    app: ks-jenkins
    heritage: "Tiller"
    release: "ks-jenkins"
    chart: "jenkins-0.19.0"
    component: "ks-jenkins-jenkins-master"
spec:
  ports:
    - port: 80
      name: http
      targetPort: 8080
      
      nodePort: 30180
      
  selector:
    component: "ks-jenkins-jenkins-master"
  type: NodePort
---
# Source: jenkins/templates/jenkins-master-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ks-jenkins
  labels:
    heritage: "Tiller"
    release: "ks-jenkins"
    chart: "jenkins-0.19.0"
    component: "ks-jenkins-jenkins-master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      component: "ks-jenkins-jenkins-master"
  template:
    metadata:
      labels:
        app: ks-jenkins
        heritage: "Tiller"
        release: "ks-jenkins"
        chart: "jenkins-0.19.0"
        component: "ks-jenkins-jenkins-master"
      annotations:
        checksum/config: 95228f5ea09d3b77b59901c52c65636e8cc72c966c597c16b97fac8fb46132e9
    spec:
      securityContext:
        runAsUser: 0
      serviceAccountName: ks-jenkins
      initContainers:
        - name: "copy-default-config"
          image: "jenkins/jenkins:2.176.2"
          imagePullPolicy: "IfNotPresent"
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          env:
            - name: JENKINS_UC_DOWNLOAD
              value: http://uc-jenkins-update-center
            
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: "0.1"
              memory: 1500Mi
            
          volumeMounts:
            -
              mountPath: /var/jenkins_home
              name: jenkins-home
            -
              mountPath: /var/jenkins_config
              name: jenkins-config
            -
              mountPath: /var/jenkins_plugins
              name: plugin-dir
            -
              mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
      containers:
        - name: ks-jenkins
          image: "jenkins/jenkins:2.176.2"
          imagePullPolicy: "IfNotPresent"
          args: [ "--argumentsRealm.passwd.$(ADMIN_USER)=$(ADMIN_PASSWORD)",  "--argumentsRealm.roles.$(ADMIN_USER)=admin"]
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-Xms512m -Xmx512m -XX:MaxRAM=2g -Dhudson.slaves.NodeProvisioner.initialDelay=20 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 -Dhudson.model.LoadStatistics.clock=5000 -Dhudson.model.LoadStatistics.decay=0.2 -Dhudson.slaves.NodeProvisioner.recurrencePeriod=5000 -Dio.jenkins.plugins.casc.ConfigurationAsCode.initialDelay=10000 -verbose:gc -Xloggc:/var/jenkins_home/gc-%t.log -XX:NumberOfGCLogFiles=2 -XX:+UseGCLogFileRotation -XX:GCLogFileSize=100m -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCCause -XX:+PrintTenuringDistribution -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+ParallelRefProcEnabled -XX:+DisableExplicitGC -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions "
            - name: JENKINS_OPTS
              value: ""
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ks-jenkins
                  key: jenkins-admin-password
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: ks-jenkins
                  key: jenkins-admin-user
            - name: CASC_JENKINS_CONFIG
              value: /var/jenkins_home/casc_configs/jenkins.yaml
            - name: com.sun.jndi.ldap.connect.timeout
              value: "15000"
            - name: com.sun.jndi.ldap.read.timeout
              value: "60000"
            - name: kubernetes.connection.timeout
              value: "60000"
            - name: kubernetes.request.timeout
              value: "60000"
            - name: EMAIL_SMTP_HOST
              value: mail.example.com
            - name: EMAIL_SMTP_PORT
              value: "465"
            - name: EMAIL_USE_SSL
              value: "False"
            - name: EMAIL_FROM_NAME
              value: KubeSphere
            - name: EMAIL_FROM_ADDR
              value: admin@example.com
            - name: EMAIL_FROM_PASS
              value: P@ssw0rd
            - name: SONAR_ENABLED
              value: "true"
            - name: SONAR_RUNNER_VERSION
              value: 3.3.0.1492
            - name: SONAR_SERVER_URL
              value: http://172.16.236.60:30311
            - name: SONAR_AUTH_TOKEN
              value: f608305319034af371ed1be3ab541f3d5f994c46
            
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: slavelistener
          # Resources configuration is a little hacky. This was to prevent breaking
          # changes, and should be cleanned up in the future once everybody had
          # enough time to migrate.
          resources:

            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: "0.1"
              memory: 1500Mi
            

          volumeMounts:
            - mountPath: /var/jenkins_home/casc_configs
              name: casc-config
              readOnly: true
            
            -
              mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            -
              mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            -
              mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            -
              mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
              readOnly: false
      volumes:
      - configMap:
          name: jenkins-casc-config
        name: casc-config
      
      - name: jenkins-config
        configMap:
          name: ks-jenkins
      - name: plugin-dir
        emptyDir: {}
      - name: secrets-dir
        emptyDir: {}
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: ks-jenkins
